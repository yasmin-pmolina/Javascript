/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("assert"),
    PairedTask = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/Task/Paired"),
    Task = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/Task");

describe("JsLoader/FlowInspector/Task/Paired", function () {
    describe("#addListenerDone", function () {
        it("notifies that paired task is done only when both tasks are done", function (done) {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            pairedTask.addListenerDone(function (evt) {
                assert.ok(nestedTask.isDone());
                assert.ok(pairedTask.isDone());

                done();
            });

            // starting order matters here

            pairedTask.start();
            nestedTask.start();

            pairedTask.done();
            nestedTask.done();
        });
    });
    describe("#addListenerFail", function () {
        it("notifies that paired task is failed only when both tasks are failed", function (done) {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            pairedTask.addListenerFail(function (evt) {
                assert.ok(nestedTask.isFailed());
                assert.ok(pairedTask.isFailed());

                done();
            });

            // starting order matters here

            pairedTask.start();
            nestedTask.start();

            pairedTask.fail();
            nestedTask.fail();
        });
    });
    describe("#addListenerStart", function () {
        it("notifies that paired task is started only when both tasks are started", function (done) {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            pairedTask.addListenerStart(function (evt) {
                assert.ok(nestedTask.isStarted());
                assert.ok(pairedTask.isStarted());

                done();
            });

            // starting order matters here

            pairedTask.start();
            nestedTask.start();
        });
    });
    describe("#addListenerStop", function () {
        it("notifies that paired task is stopped only when both tasks are stopped", function (done) {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            pairedTask.addListenerStop(function (evt) {
                assert.ok(nestedTask.isStopped());
                assert.ok(pairedTask.isStopped());

                done();
            });

            // starting order matters here

            pairedTask.start();
            nestedTask.start();

            pairedTask.stop();
            nestedTask.stop();
        });
    });
    describe("#isDone", function () {
        it("is not done when only nested task is done", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            nestedTask.done();

            pairedTask.start();

            assert.ok(!pairedTask.isDone());
        });
        it("is not done when only parent task is done", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();

            pairedTask.start();
            pairedTask.done();

            assert.ok(!pairedTask.isDone());
        });
        it("is done when both tasks are done", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            nestedTask.done();

            assert.ok(!pairedTask.isDone());

            pairedTask.start();
            pairedTask.done();

            assert.ok(pairedTask.isDone());
        });
    });
    describe("#isFailed", function () {
        it("is not failed when only nested task is failed", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            nestedTask.fail();

            assert.ok(!pairedTask.isFailed());
        });
        it("is not failed when only parent task is failed", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            pairedTask.start();
            pairedTask.fail();

            assert.ok(!pairedTask.isFailed());
        });
        it("is failed when both tasks are failed", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            nestedTask.fail();

            pairedTask.start();
            pairedTask.fail();

            assert.ok(pairedTask.isFailed());
        });
    });
    describe("#isStarted", function () {
        it("is not started when only nested task is started", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            assert.ok(!pairedTask.isStarted());
        });
        it("is not started when only parent task is started", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            pairedTask.start();
            assert.ok(!pairedTask.isStarted());
        });
        it("is started when both tasks are started", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            pairedTask.start();

            assert.ok(pairedTask.isStarted());
        });
    });
    describe("#isStopped", function () {
        it("is not stopped when only nested task is stopped", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            nestedTask.stop();

            pairedTask.start();

            assert.ok(!pairedTask.isStopped());
        });
        it("is not stopped when only parent task is stopped", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();

            pairedTask.start();
            pairedTask.stop();

            assert.ok(!pairedTask.isStopped());
        });
        it("is stopped when both tasks are stopped", function () {
            var nestedTask = new Task(),
                pairedTask = new PairedTask(nestedTask);

            nestedTask.start();
            nestedTask.stop();

            pairedTask.start();
            pairedTask.stop();

            assert.ok(pairedTask.isStopped());
        });
    });
});
