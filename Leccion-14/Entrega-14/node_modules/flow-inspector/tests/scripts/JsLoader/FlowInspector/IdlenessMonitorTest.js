/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("assert"),
    IdlenessMonitor = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/IdlenessMonitor"),
    Task = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/Task"),
    TaskAggregator = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/TaskAggregator");

describe("JsLoader/FlowInspector/IdlenessMonitor", function () {
    describe("#addListenerBusy", function () {
        it("reports that task aggregator is busy back from being idle", function (done) {
            var idlenessMonitor,
                listenerBusyBefore,
                listenerBusyAfter,
                task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            listenerBusyAfter = function () {
                assert.ok(!task1.isStarted());
                assert.ok(task2.isStarted());

                done();
            };

            listenerBusyBefore = function () {
                assert.ok(task1.isStarted());
                assert.ok(!task2.isStarted());
            };

            idlenessMonitor = new IdlenessMonitor(taskAggregator);
            idlenessMonitor.addListenerBusy(listenerBusyBefore);
            idlenessMonitor.addListenerIdle(function () {
                idlenessMonitor.removeListenerBusy(listenerBusyBefore);
                idlenessMonitor.addListenerBusy(listenerBusyAfter);
            });

            task1.start();
            task1.stop();

            task2.start();
        });
    });

    describe("#addListenerIdle", function () {
        it("reports that every task is idle", function (done) {
            var idlenessMonitor,
                task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);
            taskAggregator.add(task3);

            idlenessMonitor = new IdlenessMonitor(taskAggregator);
            idlenessMonitor.addListenerBusy(function () {
                assert.ok(task1.isStarted());
                assert.ok(!task2.isStarted());
                assert.ok(!task3.isStarted());
            });
            idlenessMonitor.addListenerIdle(function () {
                assert.ok(task1.isStopped());
                assert.ok(task2.isStopped());
                assert.ok(!task3.isStarted());

                done();
            });

            task1.start();
            task2.start();

            task1.stop();
            task2.stop();
        });
    });
});
