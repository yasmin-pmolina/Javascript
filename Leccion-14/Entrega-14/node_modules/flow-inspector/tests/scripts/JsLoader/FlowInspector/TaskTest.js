/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("assert"),
    assertState, // private, function
    Event = require("event-dispatcher").Event,
    Task = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/Task");

/**
 * @param {assert} assert
 * @param {JsLoader/FlowInspector/Task} task
 * @param {object} expected
 * @return {void}
 */
assertState = function (assert, task, expected) {
    var failureExplanation;

    if (!expected) {
        expected = {};
    }

    if (expected.done) {
        failureExplanation = "task is not done and it should be";
    } else {
        failureExplanation = "task is done and it should not be";
    }
    assert.strictEqual( !! expected.done, task.isDone(), failureExplanation);

    if (expected.failed) {
        failureExplanation = "task is not failed and it should be";
    } else {
        failureExplanation = "task is failed and it should not be";
    }
    assert.strictEqual( !! expected.failed, task.isFailed(), failureExplanation);

    if (expected.started) {
        failureExplanation = "task is not started and it should be";
    } else {
        failureExplanation = "task is started and it should not be";
    }
    assert.strictEqual( !! expected.started, task.isStarted(), failureExplanation);

    if (expected.stopped) {
        failureExplanation = "task is not stopped and it should be";
    } else {
        failureExplanation = "task is stopped and it should not be";
    }
    assert.strictEqual( !! expected.stopped, task.isStopped(), failureExplanation);
};

describe("JsLoader/FlowInspector/Task", function () {

    describe("#start", function () {
        it("can be started without callback", function () {
            var task = new Task();

            assertState(assert, task);

            task.start();

            assertState(assert, task, {
                running: true,
                started: true
            });
        });

        it("starts no sooner than explicitly asked for it", function () {
            var task;

            task = new Task();

            assert.ok(!task.isStarted());

            task.start();

            assert.ok(task.isStarted());
        });

        it("dispatches start event", function (done) {
            var task = new Task();

            task.addListenerStart(function (evt) {
                assert.strictEqual(evt.dispatcher, task);

                done();
            });

            task.start();
        });

        it("dispatches start event with data", function (done) {
            var task = new Task();

            task.addListenerStart(function (evt) {
                assert.strictEqual(evt.dispatcher, task);
                assert.strictEqual(evt.customData, "foo");

                done();
            });

            task.start({
                customData: "foo"
            });
        });

        it("cannot be started twice", function () {
            var task = new Task();

            task.start();

            assert.throws(function () {
                task.start();
            });
        });
    });

    describe("#done", function () {
        it("is done after starting", function () {
            var task = new Task();

            assertState(assert, task);

            task.start();

            assertState(assert, task, {
                running: true,
                started: true
            });

            task.done();

            assertState(assert, task, {
                done: true,
                running: false,
                started: false,
                stopped: true
            });
        });

        it("dispatches done event after stop event", function (done) {
            var order = 0,
                task = new Task();

            task.addListenerDone(function (evt) {
                order += 1;

                assert.strictEqual(order, 2);
                assert.strictEqual(evt.dispatcher, task);

                done();
            });

            task.addListenerStop(function (evt) {
                order += 1;

                assert.strictEqual(order, 1);
                assert.strictEqual(evt.dispatcher, task);
            });

            task.start();
            task.done();
        });

        it("dispatches done event with custom data after stop event", function (done) {
            var order = 0,
                task = new Task();

            task.addListenerDone(function (evt) {
                order += 1;

                assert.strictEqual(order, 2);
                assert.strictEqual(evt.customData, "foo");
                assert.strictEqual(evt.dispatcher, task);

                done();
            });

            task.addListenerStop(function (evt) {
                order += 1;

                assert.strictEqual(order, 1);
                assert.strictEqual(evt.customData, "foo");
                assert.strictEqual(evt.dispatcher, task);
            });

            task.start();
            task.done({
                customData: "foo"
            });
        });

        it("cannot be marked as done twice", function () {
            var task = new Task();

            task.start();
            task.done();

            assert.throws(function () {
                task.done();
            });
        });
    });

    describe("#doStart", function () {
        it("forces task to start even if it is starting already", function () {
            var task = new Task();

            task.starting();

            assert.throws(function () {
                task.start();
            });

            assert.ok(!task.isStarted());

            task.doStart();

            assert.ok(task.isStarted());
        });

        it("cannot be started twice", function () {
            var task = new Task();

            task.starting();

            assert.throws(function () {
                task.start();
            });

            assert.ok(!task.isStarted());

            task.doStart();

            assert.ok(task.isStarted());

            assert.throws(function () {
                task.doStart();
            });
        });
    });

    describe("#doStop", function () {
        it("forces task to stop even if it is stopping already", function () {
            var task = new Task();

            task.stopping();

            assert.throws(function () {
                task.stop();
            });

            assert.ok(!task.isStopped());

            task.doStop();

            assert.ok(task.isStopped());
        });

        it("cannot be stopped twice", function () {
            var task = new Task();

            task.stopping();

            assert.throws(function () {
                task.stop();
            });

            assert.ok(!task.isStopped());

            task.doStop();

            assert.ok(task.isStopped());

            assert.throws(function () {
                task.doStop();
            });
        });
    });

    describe("#fail", function () {
        it("is failed after starting", function () {
            var task = new Task();

            assertState(assert, task);

            task.start();

            assertState(assert, task, {
                running: true,
                started: true
            });

            task.fail();

            assertState(assert, task, {
                failed: true,
                running: false,
                started: false,
                stopped: true
            });
        });

        it("dispatches fail event after stop event", function (done) {
            var order = 0,
                task = new Task();

            task.addListenerFail(function (evt) {
                order += 1;

                assert.strictEqual(order, 2);
                assert.strictEqual(evt.dispatcher, task);

                done();
            });

            task.addListenerStop(function (evt) {
                order += 1;

                assert.strictEqual(order, 1);
                assert.strictEqual(evt.dispatcher, task);
            });

            task.start();
            task.fail();
        });

        it("dispatches fail event with custom data after stop event", function (done) {
            var order = 0,
                task = new Task();

            task.addListenerFail(function (evt) {
                order += 1;

                assert.strictEqual(order, 2);
                assert.strictEqual(evt.customData, "foo");
                assert.strictEqual(evt.dispatcher, task);

                done();
            });

            task.addListenerStop(function (evt) {
                order += 1;

                assert.strictEqual(order, 1);
                assert.strictEqual(evt.customData, "foo");
                assert.strictEqual(evt.dispatcher, task);
            });

            task.start();
            task.fail({
                customData: "foo"
            });
        });

        it("cannot be marked as failed twice", function () {
            var task = new Task();

            task.start();
            task.fail();

            assert.throws(function () {
                task.fail();
            });
        });
    });

    describe("#notifyDone", function () {
        it("does not notify twice about being done", function () {
            var task = new Task();

            task.notifyDone();
            assert.throws(function () {
                task.notifyDone();
            });
        });
    });

    describe("#notifyFail", function () {
        it("does not notify twice about being failed", function () {
            var task = new Task();

            task.notifyFail();
            assert.throws(function () {
                task.notifyFail();
            });
        });
    });

    describe("#notifyStart", function () {
        it("does not notify twice about start", function () {
            var task = new Task();

            task.notifyStart();
            assert.throws(function () {
                task.notifyStart();
            });
        });
    });

    describe("#notifyStarting", function () {
        it("does not notify twice about starting", function () {
            var task = new Task();

            task.notifyStarting();
            assert.throws(function () {
                task.notifyStarting();
            });
        });
    });

    describe("#notifyStop", function () {
        it("does not notify twice about stop", function () {
            var task = new Task();

            task.notifyStop();
            assert.throws(function () {
                task.notifyStop();
            });
        });
    });

    describe("#notifyStopping", function () {
        it("does not notify twice about stopping", function () {
            var task = new Task();

            task.notifyStopping();
            assert.throws(function () {
                task.notifyStopping();
            });
        });
    });

    describe("#onceDone", function () {
        it("triggers listener when task is done", function (done) {
            var task = new Task();

            task.onceDone(function (evt) {
                assert.ok(evt instanceof Event);
                done();
            });

            task.ready();
        });

        it("passes event data when task is done", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.onceDone(function (evt) {
                assert.equal(evt.key1, eventData.key1);

                done();
            });

            task.ready(eventData);
        });

        it("triggers listener if task is already done", function (done) {
            var task = new Task();

            task.ready();
            task.onceDone(function (evt) {
                assert.ok(evt instanceof Event);
                done();
            });
        });

        it("passes event data when task is already done", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.ready(eventData);

            task.onceDone(function (evt) {
                assert.equal(evt.key1, eventData.key1);

                done();
            });
        });
    });

    describe("#onceFailed", function () {
        it("triggers listener when task is failed", function (done) {
            var task = new Task();

            task.onceFailed(function (evt) {
                done();
            });

            task.start();
            task.fail();
        });

        it("passes event data when task is failed", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.start();
            task.onceFailed(function (evt) {
                assert.equal(evt.key1, eventData.key1);
                assert.ok(evt instanceof Event);
                done();
            });
            task.fail(eventData);
        });

        it("triggers listener if task is already failed", function (done) {
            var task = new Task();

            task.start();
            task.fail();

            task.onceFailed(function (evt) {
                done();
            });
        });

        it("passes event data when task is already failed", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.start();
            task.fail(eventData);

            task.onceFailed(function (evt) {
                assert.equal(evt.key1, eventData.key1);
                assert.ok(evt instanceof Event);
                done();
            });
        });
    });

    describe("#onceStarted", function () {
        it("triggers listener when task is started", function (done) {
            var task = new Task();

            task.onceStarted(function (evt) {
                done();
            });

            task.start();
        });

        it("passes event data when task is started", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.onceStarted(function (evt) {
                assert.equal(evt.key1, eventData.key1);
                assert.ok(evt instanceof Event);
                done();
            });
            task.start(eventData);
        });

        it("triggers listener if task is already started", function (done) {
            var task = new Task();

            task.start();
            task.onceStarted(function (evt) {
                done();
            });
        });

        it("passes event data when task is already started", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.start(eventData);
            task.onceStarted(function (evt) {
                assert.equal(evt.key1, eventData.key1);
                assert.ok(evt instanceof Event);
                done();
            });
        });
    });

    describe("#onceStopped", function () {
        it("triggers listener when task is stopped", function (done) {
            var task = new Task();

            task.onceStopped(function (evt) {
                done();
            });

            task.start();
            task.stop();
        });

        it("passes event data when task is stopped", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.start();
            task.onceStopped(function (evt) {
                assert.equal(evt.key1, eventData.key1);
                assert.ok(evt instanceof Event);
                done();
            });
            task.stop(eventData);
        });

        it("triggers listener if task is already stopped", function (done) {
            var task = new Task();

            task.start();
            task.stop();

            task.onceStopped(function (evt) {
                done();
            });
        });

        it("passes event data when task is already stopped", function (done) {
            var eventData,
                task = new Task();

            eventData = {
                key1: "value1"
            };

            task.start();
            task.stop(eventData);

            task.onceStopped(function (evt) {
                assert.equal(evt.key1, eventData.key1);
                assert.ok(evt instanceof Event);
                done();
            });
        });
    });

    describe("#ready", function () {
        it("marks task as done instantly", function () {
            var task = new Task();

            task.ready();

            assertState(assert, task, {
                done: true,
                stopped: true
            });
        });
    });

    describe("#starting", function () {
        it("dispatches starting event", function (done) {
            var data,
                task = new Task();

            data = {
                dataKey1: "dataValue1"
            };

            task.addListenerStarting(function (evt) {
                assert.equal(evt.dataKey1, "dataValue1");

                done();
            });

            task.starting(data);
        });

        it("indicates that task is not fully started", function (done) {
            var task = new Task();

            task.start = function (data) {
                task.starting(data);
                process.nextTick(task.doStart.bind(task, data));
            };

            task.start();

            assert.ok(!task.isStarted());
            assert.ok(task.isStarting());

            task.addListenerStart(function (evt) {
                assert.ok(task.isStarted());
                assert.ok(!task.isStarting());

                done();
            });
        });

        it("provides that task cannot be started several times", function () {
            var task = new Task();

            task.start = function (data) {
                task.starting(data);
                process.nextTick(task.doStart.bind(task, data));
            };

            task.start();

            assert.ok(!task.isStarted());

            assert.throws(function () {
                assert.ok(task.isStarting());
                task.start();
            });
        });
    });

    describe("#stop", function () {
        it("cannot be stopped without starting", function () {
            var task = new Task();

            assert.throws(function () {
                task.stop();
            });
        });

        it("dispatches event with custom data", function () {
            var task = new Task();

            task.start();
            task.addListenerStop(function (evt) {
                assert.strictEqual(evt.customData, "foo");
            });

            task.stop({
                customData: "foo"
            });
        });
    });

    describe("#stopping", function () {
        it("dispatches stopping event", function (done) {
            var data,
                task = new Task();

            data = {
                dataKey1: "dataValue1"
            };

            task.addListenerStopping(function (evt) {
                assert.equal(evt.dataKey1, "dataValue1");

                done();
            });

            task.stopping(data);
        });

        it("indicates that task is not fully stopped", function (done) {
            var task = new Task();

            task.stop = function (data) {
                task.stopping(data);
                process.nextTick(task.doStop.bind(task, data));
            };

            task.start();
            task.stop();

            assert.ok(!task.isStopped());
            assert.ok(task.isStopping());

            task.addListenerStop(function (evt) {
                assert.ok(task.isStopped());
                assert.ok(!task.isStopping());

                done();
            });
        });

        it("provides that task cannot be stopped several times", function () {
            var task = new Task();

            task.stop = function (data) {
                task.stopping(data);
                process.nextTick(task.doStop.bind(task, data));
            };

            task.start();
            task.stop();

            assert.ok(!task.isStopped());

            assert.throws(function () {
                assert.ok(task.isStopping());
                task.stop();
            });
        });
    });

});
