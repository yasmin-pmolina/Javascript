/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global describe: false, it: false */

var assert = require("assert"),
    Task = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/Task"),
    TaskAggregator = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/TaskAggregator"),
    TaskRepository = require(global.MODULE_ROOT + "/libraries/scripts/JsLoader/FlowInspector/TaskRepository");

describe("JsLoader/FlowInspector/TaskAggregator", function () {

    describe("#add", function () {
        it("monitors multiple tasks state", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isSomeStarted());
            assert.ok(!taskAggregator.isEveryStarted());
            task1.start();
            assert.ok(taskAggregator.isSomeStarted());
            assert.ok(!taskAggregator.isEveryStarted());
            task2.start();
            assert.ok(taskAggregator.isSomeStarted());
            assert.ok(taskAggregator.isEveryStarted());
            task1.stop();
            assert.ok(taskAggregator.isSomeStarted());
            task2.stop();
            assert.ok(!taskAggregator.isSomeStarted());
            assert.ok(!taskAggregator.isEveryStarted());
        });
    });

    describe("#addListenerEveryDone", function () {
        it("triggers only when every task is done", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerEveryDone(function () {
                assert.ok(taskAggregator.isEveryDone());

                done();
            });

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.done();
            task2.done();
        });
    });

    describe("#addListenerEveryFail", function () {
        it("triggers only when every task is failed", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerEveryFail(function () {
                assert.ok(taskAggregator.isEveryFailed());

                done();
            });

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.fail();
            task2.fail();
        });
    });

    describe("#addListenerEveryStart", function () {
        it("triggers only when every task is started", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerEveryStart(function () {
                assert.ok(taskAggregator.isEveryStarted());

                done();
            });

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();
        });
    });

    describe("#addListenerEveryStop", function () {
        it("triggers only when every task is stopped", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerEveryStop(function () {
                assert.ok(taskAggregator.isEveryStopped());

                done();
            });

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.stop();
            task2.stop();
        });
    });

    describe("#addListenerSomeDone", function () {
        it("does not notify about removed task events", function () {
            var task1 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerSomeDone(function () {
                assert.ok(false, "this code should not run");
            });

            taskAggregator.add(task1);
            taskAggregator.remove(task1);

            task1.start();
            task1.done();
        });
    });

    describe("#addListenerSomeFail", function () {
        it("does not notify about removed task events", function () {
            var task1 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerSomeFail(function () {
                assert.ok(false, "this code should not run");
            });

            taskAggregator.add(task1);
            taskAggregator.remove(task1);

            task1.start();
            task1.fail();
        });
    });

    describe("#addListenerSomeStart", function () {
        it("does not notify about removed task events", function () {
            var task1 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerSomeStart(function () {
                assert.ok(false, "this code should not run");
            });

            taskAggregator.add(task1);
            taskAggregator.remove(task1);

            task1.start();
        });
    });

    describe("#addListenerSomeStop", function () {
        it("does not notify about removed task events", function () {
            var task1 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.addListenerSomeStop(function () {
                assert.ok(false, "this code should not run");
            });

            taskAggregator.add(task1);
            taskAggregator.remove(task1);

            task1.start();
            task1.stop();
        });
    });

    describe("#done", function () {
        it("makes all attached tasks done if possible", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            taskAggregator.done();

            assert.ok(task1.isDone());
            assert.ok(!task2.isDone());
        });
    });

    describe("#fail", function () {
        it("makes all attached tasks fail if possible", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task3.start();
            task3.done();

            taskAggregator.fail();

            assert.ok(task1.isFailed());
            assert.ok(!task2.isFailed());
            assert.ok(task3.isDone());
            assert.ok(!task3.isFailed());
        });
    });

    describe("#isEveryDone", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(taskAggregator.isEveryDone());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isEveryDone());

            task1.start();
            task1.done();

            assert.ok(!taskAggregator.isEveryDone());

            task2.start();
            task2.done();

            assert.ok(taskAggregator.isEveryDone());
        });
    });

    describe("#isEveryFailed", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(taskAggregator.isEveryFailed());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isEveryFailed());

            task1.start();
            task1.fail();

            assert.ok(!taskAggregator.isEveryFailed());

            task2.start();
            task2.fail();

            assert.ok(taskAggregator.isEveryFailed());
        });
    });

    describe("#isEveryStarted", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(taskAggregator.isEveryStarted());
        });
    });

    describe("#isEveryStarted", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(taskAggregator.isEveryStarted());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isEveryStarted());

            task1.start();

            assert.ok(!taskAggregator.isEveryStarted());

            task2.start();

            assert.ok(taskAggregator.isEveryStarted());
        });
    });

    describe("#isEveryStopped", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(taskAggregator.isEveryStopped());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isEveryStopped());

            task1.start();

            assert.ok(!taskAggregator.isEveryStopped());

            task2.start();

            assert.ok(!taskAggregator.isEveryStopped());

            task1.stop();

            assert.ok(!taskAggregator.isEveryStopped());

            task2.stop();

            assert.ok(taskAggregator.isEveryStopped());
        });
    });

    describe("#isSomeDone", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(!taskAggregator.isSomeDone());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            assert.ok(!taskAggregator.isSomeDone());

            task1.done();

            assert.ok(taskAggregator.isSomeDone());
        });
    });

    describe("#isSomeFailed", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(!taskAggregator.isSomeFailed());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isSomeFailed());

            task1.start();
            task1.fail();

            assert.ok(taskAggregator.isSomeFailed());
        });
    });

    describe("#isSomeStarted", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(!taskAggregator.isSomeStarted());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isSomeStarted());

            task1.start();

            assert.ok(taskAggregator.isSomeStarted());
        });
    });

    describe("#isSomeStopped", function () {
        it("checks empty list", function () {
            var taskAggregator = new TaskAggregator();

            assert.ok(!taskAggregator.isSomeStopped());
        });
        it("determines if all tasks are done", function () {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            assert.ok(!taskAggregator.isSomeStopped());

            task1.start();

            assert.ok(!taskAggregator.isSomeStopped());

            task1.stop();

            assert.ok(taskAggregator.isSomeStopped());
        });
    });

    describe("#onceEveryDone", function () {
        it("triggers after every task is done", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.done();
            task2.done();

            taskAggregator.onceEveryDone(function () {
                assert.ok(taskAggregator.isEveryDone());
                done();
            });
        });

        it("triggers when every task is done", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.done();
            taskAggregator.onceEveryDone(function () {
                assert.ok(taskAggregator.isEveryDone());
                done();
            });

            task2.done();
        });
    });

    describe("#onceEveryFail", function () {
        it("triggers after every task is failed", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.fail();
            task2.fail();

            taskAggregator.onceEveryFail(function () {
                assert.ok(taskAggregator.isEveryFailed());
                done();
            });
        });

        it("triggers when every task is failed", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.fail();
            taskAggregator.onceEveryFail(function () {
                assert.ok(taskAggregator.isEveryFailed());
                done();
            });

            task2.fail();
        });
    });

    describe("#onceEveryStart", function () {
        it("triggers after every task is started", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            taskAggregator.onceEveryStart(function () {
                assert.ok(taskAggregator.isEveryStarted());
                done();
            });
        });

        it("triggers when every task is started", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            taskAggregator.onceEveryStart(function () {
                assert.ok(taskAggregator.isEveryStarted());
                done();
            });

            task2.start();
        });
    });

    describe("#onceEveryStop", function () {
        it("triggers after every task is stopped", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.stop();
            task2.stop();

            taskAggregator.onceEveryStop(function () {
                assert.ok(taskAggregator.isEveryStopped());
                done();
            });
        });

        it("triggers when every task is stopped", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.stop();
            taskAggregator.onceEveryStop(function () {
                assert.ok(taskAggregator.isEveryStopped());
                done();
            });

            task2.stop();
        });
    });

    describe("#onceSomeDone", function () {
        it("triggers after some task is done", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.done();
            taskAggregator.onceSomeDone(function () {
                assert.ok(taskAggregator.isSomeDone());
                assert.ok(!taskAggregator.isEveryDone());
                done();
            });

            task2.done();
        });

        it("triggers when some task is done", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            taskAggregator.onceSomeDone(function () {
                assert.ok(taskAggregator.isSomeDone());
                assert.ok(!taskAggregator.isEveryDone());
                done();
            });

            task1.done();
            task2.done();
        });
    });

    describe("#onceSomeFail", function () {
        it("triggers after some task is failed", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.fail();
            taskAggregator.onceSomeFail(function () {
                assert.ok(taskAggregator.isSomeFailed());
                assert.ok(!taskAggregator.isEveryFailed());
                done();
            });

            task2.fail();
        });

        it("triggers when some task is failed", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            taskAggregator.onceSomeFail(function () {
                assert.ok(taskAggregator.isSomeFailed());
                assert.ok(!taskAggregator.isEveryFailed());
                done();
            });

            task1.fail();
            task2.fail();
        });
    });

    describe("#onceSomeStart", function () {
        it("triggers after some task is started", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            taskAggregator.onceSomeStart(function () {
                assert.ok(taskAggregator.isSomeStarted());
                assert.ok(!taskAggregator.isEveryStarted());
                done();
            });

            task2.start();
        });

        it("triggers when some task is started", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            taskAggregator.onceSomeStart(function () {
                assert.ok(taskAggregator.isSomeStarted());
                assert.ok(!taskAggregator.isEveryStarted());
                done();
            });

            task1.start();
            task2.start();
        });
    });

    describe("#onceSomeStopped", function () {
        it("triggers after some task is stopped", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            task1.stop();

            taskAggregator.onceSomeStop(function () {
                assert.ok(taskAggregator.isSomeStopped());
                assert.ok(!taskAggregator.isEveryStopped());
                done();
            });

            task2.stop();
        });

        it("triggers when some task is stopped", function (done) {
            var task1 = new Task(),
                task2 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task2.start();

            taskAggregator.onceSomeStop(function () {
                assert.ok(taskAggregator.isSomeStopped());
                assert.ok(!taskAggregator.isEveryStopped());
                done();
            });

            task1.stop();
            task2.stop();
        });
    });

    describe("#done", function () {
        it("makes all attached tasks done if possible", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task3.start();
            task3.fail();

            taskAggregator.done();

            assert.ok(task1.isDone());
            assert.ok(!task2.isDone());
            assert.ok(task3.isFailed());
        });

        it("does not affect stopping tasks", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            task2.start();
            task2.stopping();

            task3.start();
            task3.fail();

            taskAggregator.done();

            assert.ok(task1.isDone());

            assert.ok(!task2.isDone());
            assert.ok(task2.isStopping());

            assert.ok(task3.isFailed());
        });
    });

    describe("#fail", function () {
        it("makes all attached tasks fail if possible", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task3.start();
            task3.done();

            taskAggregator.fail();

            assert.ok(task1.isFailed());
            assert.ok(!task2.isFailed());
            assert.ok(task3.isDone());
        });

        it("does not affect stopping tasks", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            task2.start();
            task2.stopping();

            task3.start();
            task3.done();

            taskAggregator.fail();

            assert.ok(task1.isFailed());

            assert.ok(!task2.isFailed());
            assert.ok(task2.isStopping());

            assert.ok(task3.isDone());
        });
    });

    describe("#findStarted", function () {
        it("returns task repository with started tasks list", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator(),
                taskRepository;

            taskAggregator.add(task1);
            taskAggregator.add(task2);
            taskAggregator.add(task3);

            task1.start();
            task3.start();

            taskRepository = taskAggregator.findStarted();

            assert.ok(taskRepository instanceof TaskRepository);
            assert.strictEqual(taskRepository.length, 2);
            assert.ok(taskRepository.has(task1));
            assert.ok(taskRepository.has(task3));
        });
    });

    describe("#start", function () {
        it("makes all attached tasks start if possible", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            task3.start();
            task3.stop();

            taskAggregator.start();

            assert.ok(task1.isStarted());
            assert.ok(task2.isStarted());
            assert.ok(!task3.isStarted());
        });

        it("does not affect starting tasks", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            task2.starting();

            task3.start();
            task3.stop();

            taskAggregator.start();

            assert.ok(task1.isStarted());

            assert.ok(!task2.isStarted());
            assert.ok(task2.isStarting());

            assert.ok(!task3.isStarted());
        });
    });

    describe("#stop", function () {
        it("makes all attached tasks stop if possible", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();
            task3.start();
            task3.fail();

            taskAggregator.stop();

            assert.ok(task1.isStopped());
            assert.ok(!task2.isStopped());
            assert.ok(task3.isStopped());
        });

        it("does not affect stopping tasks", function () {
            var task1 = new Task(),
                task2 = new Task(),
                task3 = new Task(),
                taskAggregator = new TaskAggregator();

            taskAggregator.add(task1);
            taskAggregator.add(task2);

            task1.start();

            task2.start();
            task2.stopping();

            task3.start();
            task3.fail();

            taskAggregator.stop();

            assert.ok(task1.isStopped());

            assert.ok(!task2.isStopped());
            assert.ok(task2.isStopping());

            assert.ok(task3.isStopped());
        });
    });

});
