/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

var auto = require("autoloader"),

    // classess
    Repository = auto.load("Bender/EventDispatcher/EventDispatcher/Repository");

exports.testThatItemIsAdded = function (test) {
    var item = "test item",
        repository = new Repository();

    test.equal(0, repository.length);

    repository.add(item);

    test.equal(1, repository.length);

    test.done();
};

exports.testThatItemIsNotAllowed = function (test) {
    var item = "test item",
        repository = new Repository();

    repository.isItemAllowed = function (item) {
        return false;
    };

    test.throws(function () {
        repository.add(item);
    }, Error);

    test.done();
};

exports.testThatRepositoryMustBeUnique = function (test) {
    var item = "test item",
        repository = new Repository();

    repository.isForcedToBeUnique = function () {
        return true;
    };

    repository.add(item);

    test.throws(function () {
        repository.add(item);
    }, Error);

    test.done();
};

exports.testThatItemCannotBeRemovedIfNotPreviouslyAdded = function (test) {
    var item = "test item",
        repository = new Repository();

    test.throws(function () {
        repository.remove(item);
    }, Error);

    test.done();
};

exports.testThatItemIsRemoved = function (test) {
    var item = "test item",
        repository = new Repository();

    test.equal(0, repository.length);

    repository.add(item);

    test.equal(1, repository.length);

    repository.remove(item);

    test.equal(0, repository.length);

    test.done();
};

exports.testThatRepositoryEmptyStateEventsAreFired = function (test) {
    var item1 = "item1",
        item2 = "item2",
        item3 = "item3",
        repository = new Repository(),
        wasNotEmpty = false;

    test.expect(3);

    repository.addListener(Repository.EVENT_REPOSITORY_EMPTY, function (evt) {
        test.ok(wasNotEmpty);
        test.equal(0, repository.length);

        test.done();
    });

    repository.addListener(Repository.EVENT_REPOSITORY_NOT_EMPTY, function (evt) {
        test.equal(1, repository.length);

        wasNotEmpty = true;
    });

    repository.add(item1);
    repository.add(item2);
    repository.add(item3);

    repository.remove(item1);
    repository.remove(item2);
    repository.remove(item3);
};

exports.testThatRepositoryIsCreatedWithInitialItems = function (test) {
    var item1 = "test1",
        item2 = "test2",
        item3 = "test3",
        repository = new Repository([item1, item2, item3]);

    test.equal(3, repository.length);

    test.ok(repository.has(item1));
    test.ok(repository.has(item2));
    test.ok(repository.has(item3));

    test.done();
};

exports.testThatRepositoryItemsAreReplaced = function (test) {
    var item1 = "test1",
        item2 = "test2",
        item3 = "test3",
        item4 = "test4",
        item5 = "test5",
        repository = new Repository([item1, item2, item3]);

    test.equal(3, repository.length);
    test.deepEqual(repository.items, [item1, item2, item3]);

    repository.setAll([item4, item5]);

    test.equal(2, repository.length);
    test.deepEqual(repository.items, [item4, item5]);

    test.done();
};

exports.testThatRepositoryItemsArePartiallyReplaced = function (test) {
    var item1 = "test1",
        item2 = "test2",
        item3 = "test3",
        item4 = "test4",
        repository = new Repository([item1, item2, item3]);

    test.equal(3, repository.length);
    test.deepEqual(repository.items, [item1, item2, item3]);

    repository.setAll([item1, item4]);

    test.equal(2, repository.length);
    test.deepEqual(repository.items, [item1, item4]);

    test.done();
};

exports.testThatSomethingElseThanRepositoryOrArrayCannotBeSet = function (test) {
    var repository = new Repository();

    test.throws(function () {
        repository.setAll("test");
    }, Error);

    test.done();
};
