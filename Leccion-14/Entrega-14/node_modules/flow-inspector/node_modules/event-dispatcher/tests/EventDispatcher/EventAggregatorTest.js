/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

var auto = require("autoloader"),

    Event = auto.load("Bender/EventDispatcher/Event"),
    EventAggregator = auto.load("Bender/EventDispatcher/EventAggregator"),
    EventDispatcher = auto.load("Bender/EventDispatcher/EventDispatcher"),

    getEventDispatcher; // private, function

/**
 * @param {array} supportedEvents
 * @return {Bender/EventDispatcher/EventDispatcher}
 */
getEventDispatcher = function (supportedEvents) {
    var eventDispatcher = new EventDispatcher();

    eventDispatcher.getSupportedEvents = function () {
        return supportedEvents;
    };

    return eventDispatcher;
};

exports.testThatEventsAreAggregated = function (test) {
    var eventAggregator = new EventAggregator(),
        eventDispatcherA = getEventDispatcher(["a"]),
        eventDispatcherB = getEventDispatcher(["b"]);

    test.ok(!eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    eventAggregator.add(eventDispatcherA);

    test.ok(eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    eventAggregator.add(eventDispatcherB);

    test.ok(eventAggregator.isEventSupported("a"));
    test.ok(eventAggregator.isEventSupported("b"));

    test.done();
};

exports.testThatEventDispatcherIsRemoved = function (test) {
    var eventAggregator = new EventAggregator(),
        eventDispatcherAB = getEventDispatcher(["a", "b"]);

    test.ok(!eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    eventAggregator.add(eventDispatcherAB);

    test.ok(eventAggregator.isEventSupported("a"));
    test.ok(eventAggregator.isEventSupported("b"));

    eventAggregator.remove(eventDispatcherAB);

    test.ok(!eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    test.done();
};

exports.testThatEventDispatcherIsRemovedWithInterleavedEvents = function (test) {
    var eventAggregator = new EventAggregator(),
        eventDispatcherA = getEventDispatcher(["a"]),
        eventDispatcherAB = getEventDispatcher(["a", "b"]);

    test.ok(!eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    eventAggregator.add(eventDispatcherA);

    test.ok(eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    eventAggregator.add(eventDispatcherAB);

    test.ok(eventAggregator.isEventSupported("a"));
    test.ok(eventAggregator.isEventSupported("b"));

    eventAggregator.remove(eventDispatcherA);

    test.ok(eventAggregator.isEventSupported("a"));
    test.ok(eventAggregator.isEventSupported("b"));

    eventAggregator.remove(eventDispatcherAB);

    test.ok(!eventAggregator.isEventSupported("a"));
    test.ok(!eventAggregator.isEventSupported("b"));

    test.done();
};

exports.testThatListenersAreNotified = function (test) {
    var eventAggregator = new EventAggregator(),
        eventDispatcherA = getEventDispatcher(["a"]),
        eventDispatcherB = getEventDispatcher(["b"]),
        evt;

    eventAggregator.add(eventDispatcherA);
    eventAggregator.add(eventDispatcherB);

    evt = new Event();

    test.expect(2);

    eventAggregator.addListener("a", function (dispatchedEvent) {
        test.strictEqual(dispatchedEvent, evt);
    });

    eventAggregator.addListener("b", function (dispatchedEvent) {
        test.strictEqual(dispatchedEvent, evt);
    });

    eventDispatcherA.dispatch("a", evt);
    eventDispatcherB.dispatch("b", evt);

    test.done();
};

exports.testThatListenersAreNotifiedWithInterleavedEvents = function (test) {
    var eventAggregator = new EventAggregator(),
        eventDispatcherA = getEventDispatcher(["a"]),
        eventDispatcherAB = getEventDispatcher(["a", "b"]),
        evt;

    eventAggregator.add(eventDispatcherA);
    eventAggregator.add(eventDispatcherAB);

    evt = new Event();

    test.expect(3);

    eventAggregator.addListener("a", function (dispatchedEvent) {
        test.strictEqual(dispatchedEvent, evt);
    });

    eventAggregator.addListener("b", function (dispatchedEvent) {
        test.strictEqual(dispatchedEvent, evt);
    });

    eventDispatcherA.dispatch("a", evt);
    eventDispatcherAB.dispatch("a", evt);
    eventDispatcherAB.dispatch("b", evt);

    test.done();
};
