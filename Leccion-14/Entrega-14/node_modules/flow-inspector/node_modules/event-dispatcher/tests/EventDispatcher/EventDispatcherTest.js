/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

var auto = require("autoloader"),

    // classess
    Event = auto.load("Bender/EventDispatcher/Event"),
    EventDispatcher = auto.load("Bender/EventDispatcher/EventDispatcher");

exports.testThatEventIsDispatched = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name",
        evt = new Event();

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    eventDispatcher.addListener(eventName, function (dispatchedEvent) {
        test.equal(evt, dispatchedEvent);
        test.done();
    });

    eventDispatcher.dispatch(eventName, evt);
};

exports.testThatEventIsDispatchedWithoutListeners = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name",
        evt = new Event();

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    eventDispatcher.dispatch(eventName, evt);

    test.done();
};

exports.testThatOnlyEventCanBeDispatched = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name";

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    test.throws(function () {
        eventDispatcher.dispatch(eventName, "not dispatchable object");
    }, Error);

    test.done();
};

exports.testThatEventPropagationCanBeStopped = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name",
        evt = new Event();

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    test.expect(2);

    eventDispatcher.addListener(eventName, function (dispatchedEvent) {
        test.equal(evt, dispatchedEvent);
    });

    eventDispatcher.addListener(eventName, function (dispatchedEvent) {
        test.equal(evt, dispatchedEvent);
        dispatchedEvent.stopPropagation();
    });

    eventDispatcher.addListener(eventName, function (dispatchedEvent) {
        // this assertion should not run
        test.equal(evt, dispatchedEvent);
    });

    eventDispatcher.dispatch(eventName, evt);

    test.done();
};

exports.testThatCannotListenToUnsupportedEvent = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name";

    test.throws(function () {
        eventDispatcher.addListener(eventName, function () {});
    }, Error);

    test.done();
};

exports.testThatListenerCanBeAdded = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name",
        listener = function () {};

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    test.ok(!eventDispatcher.hasListeners(eventName));
    test.ok(!eventDispatcher.hasListener(eventName, listener));

    eventDispatcher.addListener(eventName, listener);

    test.ok(eventDispatcher.hasListeners(eventName));
    test.ok(eventDispatcher.hasListener(eventName, listener));

    test.done();
};

exports.testThatListenerCanBeRemoved = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name",
        listener = function () {};

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    test.ok(!eventDispatcher.hasListeners(eventName));
    test.ok(!eventDispatcher.hasListener(eventName, listener));

    eventDispatcher.addListener(eventName, listener);

    test.ok(eventDispatcher.hasListeners(eventName));
    test.ok(eventDispatcher.hasListener(eventName, listener));

    eventDispatcher.removeListener(eventName, listener);

    test.ok(!eventDispatcher.hasListeners(eventName));
    test.ok(!eventDispatcher.hasListener(eventName, listener));

    test.done();
};

exports.testThatListenerCannotBeRemoved = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventName = "test.event.name",
        listener = function () {};

    eventDispatcher.getSupportedEvents = function () {
        return [eventName];
    };

    test.throws(function () {
        eventDispatcher.removeListener(eventName, listener);
    }, Error);

    test.done();
};

exports.testThatListenersCannotBeGetted = function (test) {
    var eventDispatcher = new EventDispatcher();

    test.throws(function () {
        eventDispatcher.getListeners();
    }, Error);

    test.done();
};

exports.testThatListenersCanBeGetted = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventA = "test.event.A",
        listenerA1 = function () {},
        listenerA2 = function () {},
        listeners;

    eventDispatcher.getSupportedEvents = function () {
        return [eventA];
    };

    eventDispatcher.addListener(eventA, listenerA1);
    eventDispatcher.addListener(eventA, listenerA2);

    listeners = eventDispatcher.getListeners(eventA);

    test.equal(listeners.length, 2);
    test.notEqual(listeners.indexOf(listenerA1), -1);
    test.notEqual(listeners.indexOf(listenerA2), -1);

    test.done();
};

exports.testThatSubscriberCanBeAdded = function (test) {
    var eventDispatcher = new EventDispatcher(),
        eventA = "test.event.A",
        eventB = "test.event.B";

    eventDispatcher.getSupportedEvents = function () {
        return [eventA, eventB];
    };

    test.ok(!eventDispatcher.hasListeners(eventA));
    test.ok(!eventDispatcher.hasListeners(eventB));

    eventDispatcher.addSubscriber({
        getSubscribedEvents: function () {
            var ret = {};

            ret[eventA] = function () {};
            ret[eventB] = function () {};

            return ret;
        }
    });

    test.ok(eventDispatcher.hasListeners(eventA));
    test.ok(eventDispatcher.hasListeners(eventB));

    test.done();
};
