/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global define: false */

define([
    "Bender/EventDispatcher/Event"
], function (Event) {

    var assertEventDispatcherSupportsEvent, // private, function
        EventDispatcher; // constructor, function

    /**
     * @param {Bender/EventDispatcher/EventDispatcher} eventDispatcher
     * @param {string} eventName
     * @return {void}
     * @throws {Error} if event dispatcher does not support given event
     */
    assertEventDispatcherSupportsEvent = function (eventDispatcher, eventName) {
        var message,
            supportedEvents;

        if (eventDispatcher.isEventSupported(eventName)) {
            return;
        }

        message = "Event dispatcher does not support event: " + eventName + ".";
        supportedEvents = eventDispatcher.getSupportedEvents();
        if (supportedEvents.length) {
            message += " Supported events are: '" + supportedEvents.join("', '") + "'.";
        }

        throw new Error(message);
    };

    /**
     * @constructor
     */
    EventDispatcher = function () {
        this.listeners = {};
    };

    /**
     * @param {string} eventName
     * @param {function} listener
     * @return {void}
     */
    EventDispatcher.prototype.addListener = function (eventName, listener) {
        assertEventDispatcherSupportsEvent(this, eventName);

        if (!this.listeners.hasOwnProperty(eventName)) {
            this.listeners[eventName] = [];
        }

        this.listeners[eventName].push(listener);
    };

    /**
     * @param {object} subscriber
     * @return {void}
     */
    EventDispatcher.prototype.addSubscriber = function (subscriber) {
        var subscribedEvent,
            subscribedEvents = subscriber.getSubscribedEvents(this);

        for (subscribedEvent in subscribedEvents) {
            if (subscribedEvents.hasOwnProperty(subscribedEvent)) {
                this.addListener(subscribedEvent, subscribedEvents[subscribedEvent]);
            }
        }
    };

    /**
     * @param {string} eventName
     * @param {Bender/EventDispatcher/Event} evt
     * @return {Bender/EventDispatcher/Event} dispatched event
     * @throws {Error} if invalid argument given
     */
    EventDispatcher.prototype.dispatch = function (eventName, evt) {
        assertEventDispatcherSupportsEvent(this, eventName);

        if (!(evt instanceof Event)) {
            throw new Error('Expected Bender/EventDispatcher/Event as an argument.');
        }

        var i,
            listeners;

        evt.dispatcher = this;

        if (!this.hasListeners(eventName)) {
            return evt;
        }

        listeners = this.getListeners(eventName);
        for (i = 0; i < listeners.length; i += 1) {
            listeners[i](evt);
            if (evt.isPropagationStopped) {
                return evt;
            }
        }

        return evt;
    };

    /**
     * @return {array}
     */
    EventDispatcher.prototype.getSupportedEvents = function () {
        return [];
    };

    /**
     * @param {string} eventName
     * @return {bool}
     * @throws {Error} if no listeners are registered
     */
    EventDispatcher.prototype.getListeners = function (eventName) {
        if (!this.hasListeners(eventName)) {
            throw new Error("There are no listeners assigned to: " + eventName);
        }

        return this.listeners[eventName];
    };

    /**
     * @param {string} eventName
     * @param {function} listener
     * @return {bool}
     */
    EventDispatcher.prototype.hasListener = function (eventName, listener) {
        /*jshint bitwise: false */
        if (!this.hasListeners(eventName)) {
            return false;
        }

        return (~this.listeners[eventName].indexOf(listener));
    };

    /**
     * @param {string} eventName
     * @return {bool}
     */
    EventDispatcher.prototype.hasListeners = function (eventName) {
        return this.listeners.hasOwnProperty(eventName) && this.listeners[eventName].length;
    };

    /**
     * @return {bool}
     */
    EventDispatcher.prototype.isEventSupported = function (eventName) {
        /*jshint bitwise: false */
        return (~this.getSupportedEvents().indexOf(eventName));
    };

    /**
     * @param {string} eventName
     * @param {function} listener
     * @return {void}
     * @throws {Error} if listener is not assigned to this dispatcher
     */
    EventDispatcher.prototype.removeListener = function (eventName, listener) {
        var found;

        if (!this.hasListener(eventName, listener)) {
            throw new Error("Given listener is not assigned to event: " + eventName);
        }

        found = this.listeners[eventName].indexOf(listener);
        this.listeners[eventName].splice(found, 1);
    };

    return EventDispatcher;

});
