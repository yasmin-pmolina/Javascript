/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global define: false */

(function (factory) {

    if ("function" === typeof define) {
        define([
            "configuration-processor/configuration-processor",
            "event-dispatcher/EventDispatcher",
            "flow-inspector/Task",
            "flow-inspector/TaskAggregator"
        ], factory);
    } else {
        module.exports = factory.apply(null, [
            require("configuration-processor"),
            require("event-dispatcher").EventDispatcher,
            require(__dirname + "/Task"),
            require(__dirname + "/TaskAggregator")
        ]);
    }

}(function (configurationProcessor, EventDispatcher, Task, TaskAggregator) {

    var config = configurationProcessor.configurationProcessor,
        IdlenessMonitor, // constructor, function
        createIdlenessEvent, // private, function
        onSomeStart, // private, function
        onSomeStop; // private, function

    /**
     * @access private
     * @param {JsLoader/FlowInspector/IdlenessMonitor} idlenessMonitor
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @return {void}
     */
    createIdlenessEvent = function (idlenessMonitor, taskAggregator) {
        return {
            idlenessMonitor: idlenessMonitor,
            taskAggregator: taskAggregator
        };
    };

    /**
     * @access private
     * @param {JsLoader/FlowInspector/IdlenessMonitor} idlenessMonitor
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @return {void}
     */
    onSomeStart = function (idlenessMonitor, taskAggregator) {
        if (1 === taskAggregator.findStarted().length) {
            idlenessMonitor.dispatch(IdlenessMonitor.EVENT_BUSY, createIdlenessEvent(idlenessMonitor, taskAggregator));
        }
    };

    /**
     * @access private
     * @param {JsLoader/FlowInspector/IdlenessMonitor} idlenessMonitor
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @return {void}
     */
    onSomeStop = function (idlenessMonitor, taskAggregator) {
        if (idlenessMonitor.isIdle()) {
            idlenessMonitor.dispatch(IdlenessMonitor.EVENT_IDLE, createIdlenessEvent(idlenessMonitor, taskAggregator));
        }
    };

    /**
     * @auguments event-dispatcher/EventDispatcher
     * @constructor
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     */
    IdlenessMonitor = function (taskAggregator) {
        EventDispatcher.call(this);

        this.taskAggregator = config.assertInstanceOf(TaskAggregator, taskAggregator);
        this.taskAggregator.addListenerSomeStart(onSomeStart.bind(null, this, this.taskAggregator));
        this.taskAggregator.addListenerSomeStop(onSomeStop.bind(null, this, this.taskAggregator));
    };
    IdlenessMonitor.prototype = Object.create(EventDispatcher.prototype);

    /**
     * @const {string}
     */
    IdlenessMonitor.EVENT_BUSY = "event.busy";

    /**
     * @const {string}
     */
    IdlenessMonitor.EVENT_IDLE = "event.idle";

    /**
     * @param {function} callback
     * @return {void}
     */
    IdlenessMonitor.prototype.addListenerBusy = function (callback) {
        this.addListener(IdlenessMonitor.EVENT_BUSY, callback);
    };

    /**
     * @param {function} callback
     * @return {void}
     */
    IdlenessMonitor.prototype.addListenerIdle = function (callback) {
        this.addListener(IdlenessMonitor.EVENT_IDLE, callback);
    };

    /**
     * @return {array}
     */
    IdlenessMonitor.prototype.getSupportedEvents = function () {
        return [
            IdlenessMonitor.EVENT_BUSY,
            IdlenessMonitor.EVENT_IDLE
        ];
    };

    /**
     * @return {bool}
     */
    IdlenessMonitor.prototype.isBusy = function () {
        return this.taskAggregator.isSomeStarted();
    };

    /**
     * @return {bool}
     */
    IdlenessMonitor.prototype.isIdle = function () {
        return !this.isBusy();
    };

    /**
     * @param {function} callback
     * @return {void}
     */
    IdlenessMonitor.prototype.removeListenerBusy = function (callback) {
        this.removeListener(IdlenessMonitor.EVENT_BUSY, callback);
    };

    /**
     * @param {function} callback
     * @return {void}
     */
    IdlenessMonitor.prototype.removeListenerIdle = function (callback) {
        this.removeListener(IdlenessMonitor.EVENT_IDLE, callback);
    };

    return IdlenessMonitor;

}));
