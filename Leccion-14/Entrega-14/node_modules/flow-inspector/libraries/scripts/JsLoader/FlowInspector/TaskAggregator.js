/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global define: false */

(function (factory) {

    if ("function" === typeof define) {
        define([
            "event-dispatcher/EventDispatcherRepository/EventAggregator",
            "flow-inspector/Task",
            "flow-inspector/TaskAggregatorDispatcher",
            "flow-inspector/TaskRepository"
        ], factory);
    } else {
        module.exports = factory.apply(null, [
            require("event-dispatcher").EventAggregator,
            require(__dirname + "/Task"),
            require(__dirname + "/TaskAggregatorDispatcher"),
            require(__dirname + "/TaskRepository")
        ]);
    }

}(function (EventAggregator, Task, TaskAggregatorDispatcher, TaskRepository) {

    var TaskAggregator, // constructor, function
        isTaskDone, // private, function
        isTaskFailed, // private, function
        isTaskStarted, // private, function
        isTaskStopped, // private, function
        onSomeDone, // private, function
        onSomeFail, // private, function
        onSomeStart, // private, function
        onSomeStop; // private, function

    /**
     * @access private
     * @param {JsLoader/FlowInspector/Task} task
     * @return {void}
     */
    isTaskDone = function (task) {
        return task.isDone();
    };

    /**
     * @access private
     * @param {JsLoader/FlowInspector/Task} task
     * @return {void}
     */
    isTaskFailed = function (task) {
        return task.isFailed();
    };

    /**
     * @access private
     * @param {JsLoader/FlowInspector/Task} task
     * @return {void}
     */
    isTaskStarted = function (task) {
        return task.isStarted();
    };

    /**
     * @access private
     * @param {JsLoader/FlowInspector/Task} task
     * @return {void}
     */
    isTaskStopped = function (task) {
        return task.isStopped();
    };

    /**
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @param {event-dispatcher/Event} evt
     * @return {void}
     */
    onSomeDone = function (taskAggregator, evt) {
        taskAggregator.someDoneEvent = taskAggregator.eventDispatcher.notifySomeDone();
        if (taskAggregator.isEveryDone()) {
            taskAggregator.everyDoneEvent = taskAggregator.eventDispatcher.notifyEveryDone();
        }
    };

    /**
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @param {event-dispatcher/Event} evt
     * @return {void}
     */
    onSomeFail = function (taskAggregator, evt) {
        taskAggregator.someFailEvent = taskAggregator.eventDispatcher.notifySomeFail();
        if (taskAggregator.isEveryFailed()) {
            taskAggregator.everyFailEvent = taskAggregator.eventDispatcher.notifyEveryFail();
        }
    };

    /**
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @param {event-dispatcher/Event} evt
     * @return {void}
     */
    onSomeStart = function (taskAggregator, evt) {
        taskAggregator.someStartEvent = taskAggregator.eventDispatcher.notifySomeStart();
        if (taskAggregator.isEveryStarted()) {
            taskAggregator.everyStartEvent = taskAggregator.eventDispatcher.notifyEveryStart();
        }
    };

    /**
     * @param {JsLoader/FlowInspector/TaskAggregator} taskAggregator
     * @param {event-dispatcher/Event} evt
     * @return {void}
     */
    onSomeStop = function (taskAggregator, evt) {
        taskAggregator.someStopEvent = taskAggregator.eventDispatcher.notifySomeStop();
        if (taskAggregator.isEveryStopped()) {
            taskAggregator.everyStopEvent = taskAggregator.eventDispatcher.notifyEveryStop();
        }
    };

    /**
     * @auguments event-dispatcher/EventAggregator
     * @borrows JsLoader/FlowInspector/Task#addListenerDone as addListenerDone
     * @borrows JsLoader/FlowInspector/Task#addListenerFail as addListenerFail
     * @borrows JsLoader/FlowInspector/Task#addListenerStart as addListenerStart
     * @borrows JsLoader/FlowInspector/Task#addListenerStop as addListenerStop
     * @borrows JsLoader/FlowInspector/Task#getSupportedEvents as getSupportedEvents
     * @constructor
     */
    TaskAggregator = function () {
        EventAggregator.call(this);

        this.eventDispatcher = new TaskAggregatorDispatcher();

        this.onSomeDone = onSomeDone.bind(null, this);
        this.onSomeFail = onSomeFail.bind(null, this);
        this.onSomeStart = onSomeStart.bind(null, this);
        this.onSomeStop = onSomeStop.bind(null, this);
    };
    TaskAggregator.prototype = Object.create(EventAggregator.prototype);

    /**
     * @param {JsLoader/FlowInspector/Task} task
     * @return {void}
     */
    TaskAggregator.prototype.add = function (task) {
        EventAggregator.prototype.add.call(this, task);

        task.addListenerDone(this.onSomeDone);
        task.addListenerFail(this.onSomeFail);
        task.addListenerStart(this.onSomeStart);
        task.addListenerStop(this.onSomeStop);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerEveryDone = function (listener) {
        this.eventDispatcher.addListenerEveryDone(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerEveryFail = function (listener) {
        this.eventDispatcher.addListenerEveryFail(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerEveryStart = function (listener) {
        this.eventDispatcher.addListenerEveryStart(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerEveryStop = function (listener) {
        this.eventDispatcher.addListenerEveryStop(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerSomeDone = function (listener) {
        this.eventDispatcher.addListenerSomeDone(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerSomeFail = function (listener) {
        this.eventDispatcher.addListenerSomeFail(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerSomeStart = function (listener) {
        this.eventDispatcher.addListenerSomeStart(listener);
    };

    /**
     * @param {function} listener
     * @return {void}
     */
    TaskAggregator.prototype.addListenerSomeStop = function (listener) {
        this.eventDispatcher.addListenerSomeStop(listener);
    };

    /**
     * @return {void}
     */
    TaskAggregator.prototype.done = function () {
        this.list.forEach(function (task) {
            if (task.canStop()) {
                task.done();
            }
        });
    };

    /**
     * @param {array} [tasks]
     * @return {JsLoader/FlowInspector/TaskRepository}
     */
    TaskAggregator.prototype.encapsulateTaskRepository = function (tasks) {
        return new TaskRepository(tasks);
    };

    /**
     * @param {mixed} [error]
     * @return {void}
     */
    TaskAggregator.prototype.fail = function (error) {
        this.list.forEach(function (task) {
            if (task.canStop()) {
                task.fail(error);
            }
        });
    };

    /**
     * @return {JsLoader/FlowInspector/TaskRepository}
     */
    TaskAggregator.prototype.findStarted = function () {
        return this.encapsulateTaskRepository(this.list.filter(isTaskStarted));
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isEveryDone = function () {
        return this.list.every(isTaskDone);
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isEveryFailed = function () {
        return this.list.every(isTaskFailed);
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isEveryStarted = function () {
        return this.list.every(isTaskStarted);
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isEveryStopped = function () {
        return this.list.every(isTaskStopped);
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isSomeDone = function () {
        return this.list.some(isTaskDone);
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isSomeFailed = function () {
        return this.list.some(isTaskFailed);
    };

    /**
     * @return {bool|undefined}
     */
    TaskAggregator.prototype.isSomeStarted = function () {
        return this.list.some(isTaskStarted);
    };

    /**
     * @return {bool}
     */
    TaskAggregator.prototype.isSomeStopped = function () {
        return this.list.some(isTaskStopped);
    };

    /**
     * @param {JsLoader/FlowInspector/Task} task
     * @return {bool}
     */
    TaskAggregator.prototype.isItemAllowed = function (task) {
        return task instanceof Task;
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceEveryDone = function (listener) {
        if (this.isEveryDone()) {
            listener();
        } else {
            this.addListenerEveryDone(listener);
        }
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceEveryFail = function (listener) {
        if (this.isEveryFailed()) {
            listener();
        } else {
            this.addListenerEveryFail(listener);
        }
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceEveryStart = function (listener) {
        if (this.isEveryStarted()) {
            listener();
        } else {
            this.addListenerEveryStart(listener);
        }
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceEveryStop = function (listener) {
        if (this.isEveryStopped()) {
            listener();
        } else {
            this.addListenerEveryStop(listener);
        }
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceSomeDone = function (listener) {
        var internalListener,
            that = this;

        if (this.isSomeDone()) {
            return void listener(this.someDoneEvent);
        }

        internalListener = function (evt) {
            listener(evt);
            that.eventDispatcher.removeListenerSomeDone(internalListener);
        };

        this.addListenerSomeDone(internalListener);
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceSomeFail = function (listener) {
        var internalListener,
            that = this;

        if (this.isSomeFailed()) {
            return void listener(this.someFailEvent);
        }

        internalListener = function (evt) {
            listener(evt);
            that.eventDispatcher.removeListenerSomeFail(internalListener);
        };

        this.addListenerSomeFail(internalListener);
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceSomeStart = function (listener) {
        var internalListener,
            that = this;

        if (this.isSomeStarted()) {
            return void listener(this.someStartEvent);
        }

        internalListener = function (evt) {
            listener(evt);
            that.eventDispatcher.removeListenerSomeStart(internalListener);
        };

        this.addListenerSomeStart(internalListener);
    };

    /**
     * @param {funciton} listener
     * @return {void}
     */
    TaskAggregator.prototype.onceSomeStop = function (listener) {
        var internalListener,
            that = this;

        if (this.isSomeStopped()) {
            return void listener(this.someStopEvent);
        }

        internalListener = function (evt) {
            listener(evt);
            that.eventDispatcher.removeListenerSomeStop(internalListener);
        };

        this.addListenerSomeStop(internalListener);
    };

    /**
     * @param {JsLoader/FlowInspector/Task} task
     * @return {void}
     */
    TaskAggregator.prototype.remove = function (task) {
        task.removeListener(Task.EVENT_DONE, this.onSomeDone);
        task.removeListener(Task.EVENT_FAIL, this.onSomeFail);
        task.removeListener(Task.EVENT_START, this.onSomeStart);
        task.removeListener(Task.EVENT_STOP, this.onSomeStop);

        EventAggregator.prototype.remove.call(this, task);
    };

    /**
     * @return {void}
     */
    TaskAggregator.prototype.start = function () {
        this.list.forEach(function (task) {
            if (task.canStart()) {
                task.start();
            }
        });
    };

    /**
     * @return {void}
     */
    TaskAggregator.prototype.stop = function () {
        this.list.forEach(function (task) {
            if (task.canStop()) {
                task.stop();
            }
        });
    };

    return TaskAggregator;

}));
