/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global define: false */

(function (factory) {

    if ("function" === typeof define) {
        define([
            "configuration-processor/configuration-processor",
            "flow-inspector/Task"
        ], factory);
    } else {
        module.exports = factory.apply(null, [
            require("configuration-processor"),
            require(__dirname + "/../Task")
        ]);
    }

}(function (configurationProcessor, Task) {

    var config = configurationProcessor.configurationProcessor,
        Paired; // constructor, function

    /**
     * @auguments JsLoader/FlowInspector/Task
     * @constructor
     * @param {JsLoader/FlowInspector/Task} task
     */
    Paired = function (task) {
        Task.call(this);

        this.task = config.assertInstanceOf(Task, task);
    };
    Paired.prototype = Object.create(Task.prototype);

    /**
     * @return {bool}
     */
    Paired.prototype.canStart = function () {
        return !Task.prototype.isStarted.call(this);
    };

    /**
     * @return {bool}
     */
    Paired.prototype.canStop = function () {
        return !Task.prototype.isStopped.call(this);
    };

    /**
     * @param {mixed} [data]
     * @return {bool}
     */
    Paired.prototype.done = function (data) {
        Task.prototype.done.call(this, data);
        if (!this.task.isDone()) {
            this.task.addListenerDone(this.notifyDone.bind(this, data));
        }
    };

    /**
     * @param {mixed} [data]
     * @return {bool}
     */
    Paired.prototype.fail = function (data) {
        Task.prototype.fail.call(this, data);
        if (!this.task.isFailed()) {
            this.task.addListenerFail(this.notifyFail.bind(this, data));
        }
    };

    /**
     * @param {mixed} [data]
     * @return {bool}
     */
    Paired.prototype.start = function (data) {
        Task.prototype.start.call(this, data);
        if (!this.task.isStarted()) {
            this.task.addListenerStart(this.notifyStart.bind(this, data));
        }
    };

    /**
     * @param {mixed} [data]
     * @return {bool}
     */
    Paired.prototype.stop = function (data) {
        Task.prototype.stop.call(this, data);
        if (!this.task.isStopped()) {
            this.task.addListenerStop(this.notifyStop.bind(this, data));
        }
    };

    /**
     * @return {bool}
     */
    Paired.prototype.isDone = function () {
        return this.task.isDone() && Task.prototype.isDone.call(this);
    };

    /**
     * @return {bool}
     */
    Paired.prototype.isFailed = function () {
        return this.task.isFailed() && Task.prototype.isFailed.call(this);
    };

    /**
     * @return {bool}
     */
    Paired.prototype.isStarted = function () {
        return this.task.isStarted() && Task.prototype.isStarted.call(this);
    };

    /**
     * @return {bool}
     */
    Paired.prototype.isStopped = function () {
        return this.task.isStopped() && Task.prototype.isStopped.call(this);
    };

    return Paired;

}));
