/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

var Configuration = require("configuration-processor").Configuration,
    HeaderConfiguration = require(__dirname + "/HeaderConfiguration"),
    MessageConfiguration; // constructor, functionp

/**
 * @auguments configuration-processor/Configuration
 * @constructor
 * @param {object} options
 */
MessageConfiguration = function (options) {
    Configuration.call(this, options);
};
MessageConfiguration.prototype = Object.create(Configuration.prototype);

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_CONTINUE = {
    CODE: 100,
    REASON_PHRASE: 'Continue'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_SWITCHING_PROTOCOLS = {
    CODE: 101,
    REASON_PHRASE: 'Switching Protocols'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PROCESSING = {
    CODE: 102,
    REASON_PHRASE: 'Processing',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_OK = {
    CODE: 200,
    REASON_PHRASE: 'OK'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_CREATED = {
    CODE: 201,
    REASON_PHRASE: 'Created'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_ACCEPTED = {
    CODE: 202,
    REASON_PHRASE: 'Accepted'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NON_AUTHORITATIVE_INFORMATION = {
    CODE: 203,
    REASON_PHRASE: 'Non-Authoritative Information'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NO_CONTENT = {
    CODE: 204,
    REASON_PHRASE: 'No Content'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_RESET_CONTENT = {
    CODE: 205,
    REASON_PHRASE: 'Reset Content'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PARTIAL_CONTENT = {
    CODE: 206,
    REASON_PHRASE: 'Partial Content'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_MULTI_STATUS = {
    CODE: 207,
    REASON_PHRASE: 'Multi-Status',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_ALREADY_REPORTED = {
    CODE: 208,
    REASON_PHRASE: 'Already Reported',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_IM_USED = {
    CODE: 226,
    REASON_PHRASE: 'IM Used',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_MULTIPLE_CHOICES = {
    CODE: 300,
    REASON_PHRASE: 'Multiple Choices'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_MOVED_PERMANENTLY = {
    CODE: 301,
    REASON_PHRASE: 'Moved Permanently'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_FOUND = {
    CODE: 302,
    REASON_PHRASE: 'Found'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_SEE_OTHER = {
    CODE: 303,
    REASON_PHRASE: 'See Other'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NOT_MODIFIED = {
    CODE: 304,
    REASON_PHRASE: 'Not Modified'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_USE_PROXY = {
    CODE: 305,
    REASON_PHRASE: 'Use Proxy'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_RESERVED = {
    CODE: 306,
    REASON_PHRASE: 'Reserved'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_TEMPORARY_REDIRECT = {
    CODE: 307,
    REASON_PHRASE: 'Temporary Redirect'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PERMANENTLY_REDIRECT = {
    CODE: 308,
    REASON_PHRASE: 'Permanent Redirect',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_BAD_REQUEST = {
    CODE: 400,
    REASON_PHRASE: 'Bad Request'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_UNAUTHORIZED = {
    CODE: 401,
    REASON_PHRASE: 'Unauthorized'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PAYMENT_REQUIRED = {
    CODE: 402,
    REASON_PHRASE: 'Payment Required'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_FORBIDDEN = {
    CODE: 403,
    REASON_PHRASE: 'Forbidden'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NOT_FOUND = {
    CODE: 404,
    REASON_PHRASE: 'Not Found'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_METHOD_NOT_ALLOWED = {
    CODE: 405,
    REASON_PHRASE: 'Method Not Allowed'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NOT_ACCEPTABLE = {
    CODE: 406,
    REASON_PHRASE: 'Not Acceptable'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PROXY_AUTHENTICATION_REQUIRED = {
    CODE: 407,
    REASON_PHRASE: 'Proxy Authentication Required'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_REQUEST_TIMEOUT = {
    CODE: 408,
    REASON_PHRASE: 'Request Timeout'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_CONFLICT = {
    CODE: 409,
    REASON_PHRASE: 'Conflict'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_GONE = {
    CODE: 410,
    REASON_PHRASE: 'Gone'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_LENGTH_REQUIRED = {
    CODE: 411,
    REASON_PHRASE: 'Length Required'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PRECONDITION_FAILED = {
    CODE: 412,
    REASON_PHRASE: 'Precondition Failed'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_REQUEST_ENTITY_TOO_LARGE = {
    CODE: 413,
    REASON_PHRASE: 'Request Entity Too Large'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_REQUEST_URI_TOO_LARGE = {
    CODE: 414,
    REASON_PHRASE: 'Request-URI Too Large'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_UNSUPPORTED_MEDIA_TYPE = {
    CODE: 415,
    REASON_PHRASE: 'Unsupported Media Type'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_REQUESTED_RANGE_NOT_SATISFIABLE = {
    CODE: 416,
    REASON_PHRASE: 'Requested Range Not Satisfiable'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_EXPECTATION_FAILED = {
    CODE: 417,
    REASON_PHRASE: 'Expectation Failed'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_I_AM_A_TEAPOT = {
    CODE: 418,
    REASON_PHRASE: 'I\'m a teapot',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_UNPROCESSABLE_ENTITY = {
    CODE: 422,
    REASON_PHRASE: 'Unprocessable Entity',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_LOCKED = {
    CODE: 423,
    REASON_PHRASE: 'Locked',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_FAILED_DEPENDENCY = {
    CODE: 424,
    REASON_PHRASE: 'Failed Dependency',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_RESERVED_FOR_WEBDAV_ADVANCED_COLLECTIONS_EXPIRED_PROPOSAL = {
    CODE: 425,
    REASON_PHRASE: 'Reserved for WebDAV advanced collections expired proposal',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_UPGRADE_REQUIRED = {
    CODE: 426,
    REASON_PHRASE: 'Upgrade Required',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_PRECONDITION_REQUIRED = {
    CODE: 428,
    REASON_PHRASE: 'Precondition Required',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_TOO_MANY_REQUESTS = {
    CODE: 429,
    REASON_PHRASE: 'Too Many Requests',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE = {
    CODE: 431,
    REASON_PHRASE: 'Request Header Fields Too Large',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_INTERNAL_SERVER_ERROR = {
    CODE: 500,
    REASON_PHRASE: 'Internal Server Error'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NOT_IMPLEMENTED = {
    CODE: 501,
    REASON_PHRASE: 'Not Implemented'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_BAD_GATEWAY = {
    CODE: 502,
    REASON_PHRASE: 'Bad Gateway'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_SERVICE_UNAVAILABLE = {
    CODE: 503,
    REASON_PHRASE: 'Service Unavailable'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_GATEWAY_TIMEOUT = {
    CODE: 504,
    REASON_PHRASE: 'Gateway Timeout'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_VERSION_NOT_SUPPORTED = {
    CODE: 505,
    REASON_PHRASE: 'HTTP Version Not Supported'
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL = {
    CODE: 506,
    REASON_PHRASE: 'Variant Also Negotiates (Experimental)',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_INSUFFICIENT_STORAGE = {
    CODE: 507,
    REASON_PHRASE: 'Insufficient Storage',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_LOOP_DETECTED = {
    CODE: 508,
    REASON_PHRASE: 'Loop Detected',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NOT_EXTENDED = {
    CODE: 510,
    REASON_PHRASE: 'Not Extended',
};

/**
 * @constant {object}
 */
MessageConfiguration.HTTP_NETWORK_AUTHENTICATION_REQUIRED = {
    CODE: 511,
    REASON_PHRASE: 'Network Authentication Required',
};

/**
 * @constant {string}
 */
MessageConfiguration.MESSAGE_CONTENT_DEFAULT = "";

/**
 * @constant {string}
 */
MessageConfiguration.MESSAGE_ENCODING_DEFAULT = "utf8";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_CONNECT = "CONNECT";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_DELETE = "DELETE";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_GET = "GET";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_HEAD = "HEAD";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_OPTIONS = "OPTIONS";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_POST = "POST";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_PUT = "PUT";

/**
 * @constant {string}
 */
MessageConfiguration.METHOD_TRACE = "TRACE";

/**
 * @return {function}
 */
MessageConfiguration.prototype.expect = function () {
    var optionalHeaderConfiguration = this.expectOptional(this.expectConfiguration(HeaderConfiguration));

    return this.expectSchema({
        content: this.expectDefault(this.expectGroupOr([
            this.expectInstanceOf(Buffer),
            this.expectString()
        ]), MessageConfiguration.MESSAGE_CONTENT_DEFAULT),
        encoding: this.expectDefault(this.expectString(), MessageConfiguration.MESSAGE_ENCODING_DEFAULT),
        headers: optionalHeaderConfiguration,
        reasonPhrase: this.expectOptional(this.expectString()),
        trailers: optionalHeaderConfiguration,
        method: this.expectOptional(this.expectEnum(this.getAllowedMethods())),
        statusCode: this.expectEnum(this.getAllowedStatusCodes())
    });
};

/**
 * @return {array}
 */
MessageConfiguration.prototype.getAllowedMethods = function () {
    return [
        MessageConfiguration.METHOD_CONNECT,
        MessageConfiguration.METHOD_DELETE,
        MessageConfiguration.METHOD_GET,
        MessageConfiguration.METHOD_HEAD,
        MessageConfiguration.METHOD_OPTIONS,
        MessageConfiguration.METHOD_POST,
        MessageConfiguration.METHOD_PUT,
        MessageConfiguration.METHOD_TRACE
    ];
};

/**
 * @return {array}
 */
MessageConfiguration.prototype.getAllowedStatusCodes = function () {
    return [
        MessageConfiguration.HTTP_ACCEPTED.CODE,
        MessageConfiguration.HTTP_ALREADY_REPORTED.CODE,
        MessageConfiguration.HTTP_BAD_GATEWAY.CODE,
        MessageConfiguration.HTTP_BAD_REQUEST.CODE,
        MessageConfiguration.HTTP_CONFLICT.CODE,
        MessageConfiguration.HTTP_CONTINUE.CODE,
        MessageConfiguration.HTTP_CREATED.CODE,
        MessageConfiguration.HTTP_EXPECTATION_FAILED.CODE,
        MessageConfiguration.HTTP_FAILED_DEPENDENCY.CODE,
        MessageConfiguration.HTTP_FORBIDDEN.CODE,
        MessageConfiguration.HTTP_FOUND.CODE,
        MessageConfiguration.HTTP_GATEWAY_TIMEOUT.CODE,
        MessageConfiguration.HTTP_GONE.CODE,
        MessageConfiguration.HTTP_I_AM_A_TEAPOT.CODE,
        MessageConfiguration.HTTP_IM_USED.CODE,
        MessageConfiguration.HTTP_INSUFFICIENT_STORAGE.CODE,
        MessageConfiguration.HTTP_INTERNAL_SERVER_ERROR.CODE,
        MessageConfiguration.HTTP_LENGTH_REQUIRED.CODE,
        MessageConfiguration.HTTP_LOCKED.CODE,
        MessageConfiguration.HTTP_LOOP_DETECTED.CODE,
        MessageConfiguration.HTTP_METHOD_NOT_ALLOWED.CODE,
        MessageConfiguration.HTTP_MOVED_PERMANENTLY.CODE,
        MessageConfiguration.HTTP_MULTI_STATUS.CODE,
        MessageConfiguration.HTTP_MULTIPLE_CHOICES.CODE,
        MessageConfiguration.HTTP_NETWORK_AUTHENTICATION_REQUIRED.CODE,
        MessageConfiguration.HTTP_NO_CONTENT.CODE,
        MessageConfiguration.HTTP_NON_AUTHORITATIVE_INFORMATION.CODE,
        MessageConfiguration.HTTP_NOT_ACCEPTABLE.CODE,
        MessageConfiguration.HTTP_NOT_EXTENDED.CODE,
        MessageConfiguration.HTTP_NOT_FOUND.CODE,
        MessageConfiguration.HTTP_NOT_IMPLEMENTED.CODE,
        MessageConfiguration.HTTP_NOT_MODIFIED.CODE,
        MessageConfiguration.HTTP_OK.CODE,
        MessageConfiguration.HTTP_PARTIAL_CONTENT.CODE,
        MessageConfiguration.HTTP_PAYMENT_REQUIRED.CODE,
        MessageConfiguration.HTTP_PERMANENTLY_REDIRECT.CODE,
        MessageConfiguration.HTTP_PRECONDITION_FAILED.CODE,
        MessageConfiguration.HTTP_PRECONDITION_REQUIRED.CODE,
        MessageConfiguration.HTTP_PROCESSING.CODE,
        MessageConfiguration.HTTP_PROXY_AUTHENTICATION_REQUIRED.CODE,
        MessageConfiguration.HTTP_REQUEST_ENTITY_TOO_LARGE.CODE,
        MessageConfiguration.HTTP_REQUEST_HEADER_FIELDS_TOO_LARGE.CODE,
        MessageConfiguration.HTTP_REQUEST_TIMEOUT.CODE,
        MessageConfiguration.HTTP_REQUEST_URI_TOO_LARGE.CODE,
        MessageConfiguration.HTTP_REQUESTED_RANGE_NOT_SATISFIABLE.CODE,
        MessageConfiguration.HTTP_RESERVED.CODE,
        MessageConfiguration.HTTP_RESERVED_FOR_WEBDAV_ADVANCED_COLLECTIONS_EXPIRED_PROPOSAL.CODE,
        MessageConfiguration.HTTP_RESET_CONTENT.CODE,
        MessageConfiguration.HTTP_SEE_OTHER.CODE,
        MessageConfiguration.HTTP_SERVICE_UNAVAILABLE.CODE,
        MessageConfiguration.HTTP_SWITCHING_PROTOCOLS.CODE,
        MessageConfiguration.HTTP_TEMPORARY_REDIRECT.CODE,
        MessageConfiguration.HTTP_TOO_MANY_REQUESTS.CODE,
        MessageConfiguration.HTTP_UNAUTHORIZED.CODE,
        MessageConfiguration.HTTP_UNPROCESSABLE_ENTITY.CODE,
        MessageConfiguration.HTTP_UNSUPPORTED_MEDIA_TYPE.CODE,
        MessageConfiguration.HTTP_UPGRADE_REQUIRED.CODE,
        MessageConfiguration.HTTP_USE_PROXY.CODE,
        MessageConfiguration.HTTP_VARIANT_ALSO_NEGOTIATES_EXPERIMENTAL.CODE,
        MessageConfiguration.HTTP_VERSION_NOT_SUPPORTED.CODE
    ];
};

module.exports = MessageConfiguration;
