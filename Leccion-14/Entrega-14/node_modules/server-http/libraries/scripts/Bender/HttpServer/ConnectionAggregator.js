/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

var config = require("configuration-processor").configurationProcessor,
    Connection = require(__dirname + "/Connection"),
    ConnectionAggregator, // constructor, function
    TaskAggregator = require("flow-inspector").TaskAggregator;

/**
 * @auguments flow-inspector/TaskAggregator
 * @borrows Bender/HttpServer/Connection.getSupportedEvents as getSupportedEvents
 * @constructor
 */
ConnectionAggregator = function () {
    TaskAggregator.call(this);
};
ConnectionAggregator.prototype = Object.create(TaskAggregator.prototype);

/**
 * @return {array}
 */
ConnectionAggregator.prototype.getSupportedEvents = function () {
    var connectionEvents = Connection.prototype.getSupportedEvents.call(this);

    return TaskAggregator.prototype.getSupportedEvents.call(this).concat(connectionEvents);
};

/**
 * @param {Bender/HttpServer/Connection} connection
 * @return {void}
 */
ConnectionAggregator.prototype.isItemAllowed = function (connection) {
    return connection instanceof Connection;
};

/**
 * @param {number} miliseconds
 * @return {void}
 */
ConnectionAggregator.prototype.setShutdownTimeout = function (miliseconds) {
    miliseconds = config.assertInt(miliseconds);

    this.list.forEach(function (connection) {
        if (!connection.isStopped()) {
            connection.setShutdownTimeout(miliseconds);
        }
    });
};

module.exports = ConnectionAggregator;
