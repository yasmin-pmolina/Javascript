/**
 * @license Copyright (c) 2013, CKSource - Frederico Knabben
 * For licensing, see LICENSE
 */

"use strict";

/* global afterEach: false, before: false, beforeEach: false, describe: false, it: false */

var assert = require("assert"),
    fs = require("fs"),
    http = require("http"),
    server = require(global.MODULE_ROOT + "/libraries/modules/server-http"),
    FileStream = require(global.MODULE_ROOT + "/libraries/scripts/Bender/HttpServer/Stream/File"),
    // Response = require(global.MODULE_ROOT + "/libraries/scripts/Bender/HttpServer/Message/Outcoming/Response"),
    Server = require(global.MODULE_ROOT + "/libraries/scripts/Bender/HttpServer/Server"),
    Stream = require(global.MODULE_ROOT + "/libraries/scripts/Bender/HttpServer/Stream");

describe("Bender/HttpServer/Message/Outcoming/Response", function () {
    var httpServer,
        makeDefaultRequest, // private, function
        testPortNumber;

    /**
     * @access private
     * @param {function} callback
     * @return {void}
     */
    makeDefaultRequest = function (callback) {
        var request = http.request({
            hostname: httpServer.options.hostname,
            port: httpServer.options.port
        }, callback);
        request.end();
    };

    afterEach(function (done) {
        httpServer.addListenerStop(function (evt) {
            done();
        });
        httpServer.stop();
    });

    before(function (done) {
        server.findAvailablePort(function (port) {
            testPortNumber = port;

            done();
        });
    });

    beforeEach(function (done) {
        httpServer = new Server({
            port: testPortNumber
        });
        httpServer.addListenerStart(function (evt) {
            done();
        });

        httpServer.start();
    });

    describe("#stream", function () {
        it("allows streaming custom responses", function (done) {
            makeDefaultRequest(function (response) {
                var encoding = "utf8";

                assert.equal(response.statusCode, 200);
                assert.equal(response.headers["content-type"], "application/javascript");

                response.setEncoding(encoding);
                response.addListener("data", function (data) {
                    assert.strictEqual(data, fs.readFileSync(__filename, {
                        encoding: encoding
                    }));
                });
                response.addListener("end", function () {
                    done();
                });
            });

            httpServer.addListenerOutcomingResponse(function (evt) {
                var fileStream = new FileStream(__filename),
                    response = evt.response;

                response.stream(fileStream).addListenerDone(function (evt) {
                    response.done();
                });
            });
        });

        it("reacts to stream errors", function (done) {
            var responseStream;

            responseStream = new Stream({
                statusCode: 200
            });
            responseStream._read = function () {
                this.emit("error", new Error("This is a test error."));
            };

            makeDefaultRequest(function (response) {
                assert.equal(response.statusCode, 200);
            });

            httpServer.addListenerOutcomingResponse(function (evt) {
                var response = evt.response;

                response.stream(responseStream).onceFailed(function (evt) {
                    response.fail();
                    done();
                });
            });
        });
    });

});
